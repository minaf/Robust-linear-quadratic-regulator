classdef dual_controller_structure < controller_structure
    methods
        function con = get_dual_controller(obj, system_real, Tf)
            initial_structure = obj;
            [Nx, Nu] = get_state_size(system_real);
            tau = sdpvar(1);
            Qcl = system_real.Qcl;
            Rcl = system_real.Rcl;
            
            C = [Qcl*obj.W; Rcl*obj.Z'];
            S = [obj.X C; C' obj.W]; %the cost
            Objective = trace(obj.X);
            ops = sdpsettings('solver','mosek','verbose',0);
            
             val_t = [0 Inf]; %t and the corresponding minimum objective 
    for t = [linspace(0.005,0.049,10)  linspace(0.05,tau_nom*1.1,10)]
        öbj =
    yalmip('clear')   
            Constraints = [obj.T1-tau*obj.T2>=0, obj.W>=0,S>=0, tau>=0];
            sol = optimize(Constraints,Objective, ops);
    end      
            Kdc = double(obj.Z)'/(double(obj.W));
            cost_old = double(Objective);
            Wdc = double(obj.W);
            cost_new = calculate_cost(Kdc, system_real, Tf);
            
            tmp = size(obj.T2);
            con = controller_ss(Kdc, Wdc, cost_old, cost_new, obj.T2(tmp(1)-Nx-Nu+1:end, tmp(2)-Nx-Nu+1:end));   

        end
        
    end
end

 val_t = [0 Inf]; %t and the corresponding minimum objective 
    for t = [linspace(0.005,0.049,10)  linspace(0.05,tau_nom*1.1,10)]
        
    yalmip('clear')    

    W = sdpvar(Nx,Nx);    
    Z = sdpvar(Nx,Nu,'full');    
    X = sdpvar(Nx+Nu,Nx+Nu);     
    D = sdpvar(Nx+Nu,Nx+Nu);
    
%     sdpvar W(3,3);
%     sdpvar Z(3,3,'full');
%     sdpvar X(6,6);
%     sdpvar T1(15, 15);
%     sdpvar T2(15, 15);
%     sdpvar S(9,9);
%     sdpvar D(6,6);
    
    tau = sdpvar(1); % J: changed from t and now defined as dec. variable

    I = eye(Nx);
    H = blkdiag(W, I);
    F = [W*Ab'+Z*Bb'; sigma_w*I]; % J: mutliplied by sigma_w
    G = -[W Z; zeros(Nx, Nx+Nu)];
    
    T1 = blkdiag(H, W, zeros(Nx+Nu, Nx+Nu));
    T1(1:2*Nx, 2*Nx+1:end) = [F G];
    T1(2*Nx+1:end, 1:2*Nx) = [F'; G'];
    
    T2 = blkdiag(zeros(2*Nx, 2*Nx), I, -const*(D0)); % D = const*(Phi'*Phi)

    T3 = blkdiag(zeros(2*Nx, 2*Nx), I, -const*(D0 + Tf*D)); 
   
% Quantities for the bound on the variance
    Cbnd = [W; Z'];
    Bbnd = [I K0'];
    
    
    C = [Qcl*W; Rcl*Z'];
    S = [X C; C' W]; %the cost
    Objective = trace(X);
    
        
        Constraints = [];
        
% constraints for dual-control objective        
        Constraints = [T1-t*T3>=0, S>=0, Cbnd*Bbnd + Bbnd'*Cbnd' - Bbnd'*W*Bbnd >= D ];
        
%         Constraints = [Constraints, D >= 0];
        
% constraints for budget-constraint: this makes a common lyapunov assumption       
%         Constraints = [Constraints, T1-tau*T2>=0, Objective <= budget, tau >= 0];
        
        ops = sdpsettings('solver','mosek','verbose',0);
        sol = optimize(Constraints,Objective, ops);
 
%         [t double(Objective)]
%         sol.info
               
        if(sol.problem == 0 && double(Objective)<val_t(2))
            val_t = [t double(Objective)];
            Ztmp = double(Z);
            Wtmp = double(W);
            tau_tmp = double(tau);
            Dtmp = double(D);
        end
    end
  